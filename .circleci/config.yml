version: 2.1
jobs:
    build-front:
        docker:
            - image: circleci/node:8.11.3
        working_directory: ~/repo
        steps:
          - checkout
          - restore_cache:
              keys:
                  - node-modules-{{ checksum "client/package.json" }}
                  - node-modules-
          - run: 
              name: Install client-side dependencies
              working_directory: ~/repo/client
              command: yarn install
          - save_cache:
              paths:
                  - client/node_modules
              key: node-modules-{{ checksum "client/package.json" }}
    test-front:
        docker:
            - image: circleci/node:8.11.3
        working_directory: ~/repo
        steps:
            - checkout
            - restore_cache:
                keys:
                    - node-modules-{{ checksum "client/package.json" }}
                    - node-modules-
            - run: 
                name: Run tests of client-side application
                working_directory: ~/repo/client
                command: |
                    yarn test
    build-apiserver:
        docker:
            - image: circleci/golang:1.11.1
        working_directory: ~/repo
        steps:
            - checkout
            - run:
                name: Build a golang application
                working_directory: ~/repo/server
                command: |
                    make install
    test-apiserver:
        docker:
            - image: circleci/golang:1.11.1
        working_directory: ~/repo
        steps:
            - checkout
            - run:
                name: Run tests of go application
                working_directory: ~/repo/server
                command: |
                    export GOPATH=$(pwd)
                    make test
    deploy:
        docker:
            - image: google/cloud-sdk
        working_directory: ~/repo
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Setup Google Cloud SDK
                command: |
                    echo $SERVICE_KEY | gcloud auth activate-service-account $SERVICE_ACCOUNT_EMAIL --key-file=-
                    set -x
                    gcloud --quiet config set project $PROJECT_ID
                    gcloud --quiet config set compute/zone $COMPUTE_ZONE
                    gcloud --quiet container clusters get-credentials $CLUSTER_NAME
            - run:
                name: Build docker image
                command: |
                    gcloud auth configure-docker
                    docker build --tag us.gcr.io/$PROJECT_ID/blog-api-server:$CIRCLE_SHA1 server
                    docker build --tag us.gcr.io/$PROJECT_ID/blog-front-server:$CIRCLE_SHA1 client
            - run:
                name: Push docker images to container registry
                command: |
                    docker push us.gcr.io/$PROJECT_ID/blog-api-server:$CIRCLE_SHA1
                    docker push us.gcr.io/$PROJECT_ID/blog-front-server:$CIRCLE_SHA1
            - run:
                name: Let's deploy the app!
                command: |
                    # kubectl apply -f k8s.yaml
                    # kubectl rollout status deployment
                    # kubectl get pods
workflows:
    version: 2
    build_and_test:
        jobs:
            - build-front
            - test-front:
                requires:
                    - build-front
            - test-apiserver
            - deploy:
                requires:
                    - test-front
                    - test-apiserver
                filters:
                    branches:
                        only: master
        